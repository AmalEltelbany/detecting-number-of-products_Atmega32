
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005fb  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000573  00000000  00000000  0000079f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022a  00000000  00000000  00000d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031f  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000036  00000000  00000000  0000127f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU8000000UL //defining the clock speed of the microprocessor for the delay  

#include <util/delay.h> 
void main(){ 
//Initialization 
DDRA |= (1<<0) | (1<<1) | (1<<2); // Set the direction of the PORTA0 ,PORTA1 and  PORTA2 to output 
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	87 60       	ori	r24, 0x07	; 7
  70:	8a bb       	out	0x1a, r24	; 26
DDRA &= ~(1<<3); // Set the direction of the PORTA3 to input 
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	87 7f       	andi	r24, 0xF7	; 247
  76:	8a bb       	out	0x1a, r24	; 26
PORTA = 0x01; // Set the PORTA value to one to light the green  light and make sure all other bits are zero 
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	8b bb       	out	0x1b, r24	; 27
PORTA |= (1<<3); // Enables the internal pull up for PORTA3 
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	88 60       	ori	r24, 0x08	; 8
  80:	8b bb       	out	0x1b, r24	; 27
unsigned char counter = 0; 
  82:	80 e0       	ldi	r24, 0x00	; 0
 * counter that counts to 12 then stops 
 * as if it counts the boxes and waits 
 * for the restart button to be pressed 
 * to count again 
 */ 
 if(((PINA>>3)&1) == 0) 
  84:	cb 99       	sbic	0x19, 3	; 25
  86:	07 c0       	rjmp	.+14     	; 0x96 <main+0x2a>
 { 
 counter = 0; 
 PORTA |= (1<<0); //turn on the green light 
  88:	8b b3       	in	r24, 0x1b	; 27
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	8b bb       	out	0x1b, r24	; 27
 PORTA &= ~((1<<1) | (1<<2)); //turn off the red light and the buzzer 
  8e:	8b b3       	in	r24, 0x1b	; 27
  90:	89 7f       	andi	r24, 0xF9	; 249
  92:	8b bb       	out	0x1b, r24	; 27
 * for the restart button to be pressed 
 * to count again 
 */ 
 if(((PINA>>3)&1) == 0) 
 { 
 counter = 0; 
  94:	80 e0       	ldi	r24, 0x00	; 0
 PORTA |= (1<<0); //turn on the green light 
 PORTA &= ~((1<<1) | (1<<2)); //turn off the red light and the buzzer 
 } 
 if(counter == 12) 
  96:	8c 30       	cpi	r24, 0x0C	; 12
  98:	39 f4       	brne	.+14     	; 0xa8 <main+0x3c>
 { 
 PORTA &= ~(1<<0); //turn off the green light 
  9a:	9b b3       	in	r25, 0x1b	; 27
  9c:	9e 7f       	andi	r25, 0xFE	; 254
  9e:	9b bb       	out	0x1b, r25	; 27
 PORTA |= (1<<1) | (1<<2); //turn on the red light and the buzzer 
  a0:	9b b3       	in	r25, 0x1b	; 27
  a2:	96 60       	ori	r25, 0x06	; 6
  a4:	9b bb       	out	0x1b, r25	; 27
  a6:	ee cf       	rjmp	.-36     	; 0x84 <main+0x18>
 } 
 else 
 { 
 counter++; 
  a8:	8f 5f       	subi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f e3       	ldi	r18, 0x3F	; 63
  ac:	3d e0       	ldi	r19, 0x0D	; 13
  ae:	93 e0       	ldi	r25, 0x03	; 3
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	30 40       	sbci	r19, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop
  bc:	e3 cf       	rjmp	.-58     	; 0x84 <main+0x18>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
